from django.shortcuts import render, get_object_or_404

from .models import Issue, Question
from django.core.exceptions import ObjectDoesNotExist
from bs4 import BeautifulSoup
from urllib.request import urlopen

import re
# Create your views here.
def home(request):
    issue = Issue.objects
    home_crwaling()
    return render(request, 'home.html', {'issue':issue})


def home_crwaling():
    url = "https://github.com/leewoongi/Algorithm/issues"
    html = urlopen(url)
    source = html.read()
    html.close()

    soup = BeautifulSoup(source, "html.parser")
    r = re.compile('issue_[0-9]+_link')
    title = (soup.find_all('a', {'id' : r}))

    for t in title:
        tmp = str(t.get_text())
        obj, created = Issue.objects.get_or_create(title = tmp, defaults = {'title' : tmp})
        print(t.get_text())


def detail(request, issue_id):
    title = get_object_or_404(Issue,pk=issue_id)

    #print(Issue.objects.get(pk= issue_id))
    #print(Issue.objects.get(pk= issue_id))
    
    
    #print(title_choice)
    
    detail_crwaling(title)
    
    print(title.question_set.all())
    
    return render(request,'detail.html', {'title' : title})


def detail_crwaling(request ,title):
    tmp_title = str(title)
    title_split = tmp_title.split(' ')

    issue_num = title_split[2:]
    issue_num = (",".join(issue_num))[1:]

    url = "https://github.com/leewoongi/Algorithm/issues/" + str(issue_num)
    html = urlopen(url)
    source = html.read() 
    html.close()

    soup = BeautifulSoup(source, 'html.parser')
    questions = soup.find_all('td' , {'class' : "d-block comment-body markdown-body js-comment-body"})
    questions = questions[0]
    questions = questions.get_text().split("\n")
    print(questions[1:-1])

    qqq = title.question_set
    
    index= 1
    for q  in questions:
        
        obj, create = qqq.get_or_create(question = questions[index] , question_link = questions[index +1],
                                                    defaults = {'question' : questions[index], 'question_link' : questions[index+1]})
        index+=2
        if index >= len(questions) - 1:
            break




    
